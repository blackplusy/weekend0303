1.常用的数据库软件
	关系
		informix  IBM+HP
		db2       IBM
		oracle    甲骨文   
		mysql	  甲骨文
		sqlserver 微软
	非关系型
		mongodb   大数据、爬虫
		redis     缓存、验证、消息队列
		cassandra facebook
2.mysql的安装(ubuntu)
	sudo apt-get install mysql-server

3.mysql的管理工具
	mysql workbench
	sqlyog(小海豚)
	toad
	navicat
	dbeaver
4.mysql登录
	mysql
		登录本地数据库
	mysql -u root -p
		管理员登录本地数据库
	mysql -h 127.0.0.1 -u root -p
		管理员登录IP为127.0.0.1的数据库
5.mysql的服务
	mysqld	mysql的主服务
	mysql	mysql的客户端服务
	3306    mysql的端口
	补充:
	ps -ef |grep mysqld
		查看系统中mysqld服务是否正常运行
	ps -ef 查看系统中正在运行的进程
	|      管道，前面的输出作为后面的输入
	grep   搜索内容
	netstat -an |grep 3306
		查看mysql端口是否启动
	netstat -an 查看系统中开放的所有端口
	127.0.0.1==localhost==电脑本机
6.mysql的基础命令
	数据库软件分为2部分：数据库软件、数据库数据，常说的数据库是数据库的数据库
	mysql数据库的数据库是由表组成
	mysql数据库的表是由数据组成
	show databases;
		查看当前有哪些数据库
	select database();
		查看当前数据库的名字
	use mysql;
		数据库切换为mysql
	show tables;
		查看当前数据库中有哪些表
	select * from user;
		查看user表中所有数据
		

7.远程连接其他主机
	1.设置配置文件(服务端配置文件)
	sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 
	bind-address = 0.0.0.0
	重启mysqld服务
	sudo /etc/init.d/mysql restart
	2.授权
	登录后使用
	grant all  privileges  on *.* to root@'%' idenfied by 'test';
8.SQL(结构化查询语言)
	DDL：数据库定义语言   create alter drop truncate
	DML: 数据库操作语言   insert update delete
	DCL: 数据库控制语言   grant  revoke
	DQL：数据库查询语言   select
9.表结构
	a.创建表结构
	表：类似于excel，有行有列，表头，数据
	a1.数据类型
		字符类型 'abc' '123' char varchar
		数字类型  123 3.1415 int 
		日期类型  2018-01-01 date
	补充：
		char     定长  char(10)    速度快，占存储
		varchar  变长  varchar(10) 速度慢，省空间
	a2.表结构创建
	语法：create table 表(
			列  数据类型,
			列  数据类型....
		);
	例子：创建商品表(goods),里面3个列，名称(name) 字符类型(10),价格(price) s数字类型，出厂日期(ddate) 日期类型;
	create table goods(
		name char(10),
		price int,
		ddate date
	);
	注意：一定要先进入到数据库中
	补充：查看表结构 desc 表名;
	例子：查看goods表的表结构
		desc goods;
	b.修改表结构
	修改数据类型
	例子：修改goods表中name数据类型为varchar
	alter table goods modify name varchar(30);
	c.删除表结构
	语法：drop table  表;
	例子：删除goods表
		drop table goods;
	d.约束
	d1.主键约束   列中的数据不重复，每张表中只能有一个，不能为空
	d2.唯一约束   列中的数据不重复，作为主键约束的补充，可以为空
	d3.非空约束   列中的数据不能为空
	d4.检查约束   列中的数据是否满足条件
	d5.外键(参考约束) 列中的数据依赖于另外一张表中的列

	语法:
	create table 表(
		列 数据类型 primary key,
		列 数据类型 unique,
		列 数据类型 not null,
		列 数据类型 check(检查条件),
		列 数据类型 references 被参考表(被参考列)
	);
	例子：创建表emp,员工id(yid) 数字类型，主键约束，员工电话(tel) 数字类型 唯一约束，员工名字 字符类型 不能为空，工资(sal) 介于2000和3000之前
	create table emp(
		yid int primary key,
		tel int unique,
		name char(10) not null,
		sal int check(sal>=2000 and sal<=3000)		
	);
	外键约束需要注意：
	1.被参考表的被参考列一定存在
	2.参考列和被参考列数据类型一致
	3.被参考列一定是主键约束
	
	create table customer(
		kid  int primary key,
		kinfo char(20)
	);

	CREATE TABLE order (
   	 kid INT,
    	 oinfo char(20),
   	 FOREIGN KEY (kid)
        	REFERENCES customer(kid)
	);

	
=================================================
1.数据的新增
注意：
字符类型数据需要加单引号
数字类型数据直接使用
日期类型数据需要加单引号
列和值的位置一定要对应
a.向表中所有列新增数据
语法：insert into 表 values (值1,值2.....);
例子：向goods表中新增数据，商品名称ball,价格500,出厂日期2000-01-01
insert into goods values('ball',500,'2000-01-01');
b.向表中指定列新增数据
语法：insert into 表(列1,列2....) values(值1,值2.....);
例子：向goods表中新增数据，商品名称pen，价格20
insert into goods(name,price) values('pen',20);
例子：向goods表中新增数据，商品名称ball,价格500,出厂日期2000-01-01
insert into goods(name,price,ddate) values('tank',500,'2000-01-01');

2.数据的修改
语法：update 表 set 列=值 where 条件;
注意：增加where条件时候修改的是指定行的数据，如果没有where修改的是整个列中所有数据
例子:修改goods表中商品名称为ball的价格为998
update goods set price=998 where name='ball';
例子：修改goods表中所有商品价格为0
update goods set price=0;

3.数据的删除
delete    DML 可以删除指定数据 可以找回 需要commit
truncate  DDL 只能删除全表数据 不能找回 不需要commit
delete语法：
delete from 表 where 条件;
注意：不加where条件，删除整张表数据，增加的话删除指定数据
例子：删除goods表中商品名称是tank的所有信息
delete from goods where name='tank';
例子：删除goods表中所有数据
delete from goods;

truncate(截断)语法：
truncate table 表;
例子：删除goods表中所有数据
truncate table goods;

4.事务
一件事有开头就一定要结束
heygor=====bank====handsome!!!
commit;		把当前数据提交到数据库中除非认为修改，否则自己不会变化
rollback;       把数据库状态恢复到最后一次提交状态。
注意：所有DML语句会触发事务的开始。也就是一定要结束。


5.sakila数据库导入
a.下载地址
帮助文档：https://dev.mysql.com/doc/sakila/en/sakila-installation.html
下载地址：https://dev.mysql.com/doc/index-other.html
b.进入到sakila下载所在目录解压
	tar -xzvf sakila-db.tar.gz  解压压缩包到当前目录下
c.进入到解压后的目录
	cd 下载/sakila-db/
d.登录mysql数据库
	mysql -u root -p
e.导入sakila-schema.sql
	source sakila-schema.sql;
f.导入sakila-data.sql
	source sakila-data.sql;
g.测试
	show databases; 可以看到sakila数据库
	use sakila;
	show tables;    可以看到sakila中所有的表
	select * from city; 可以看到数据信息

6.数据的查询
	a.常见分类
		简单查询(单表查询)
		多表查询(连接查询)
		子查询
		分组查询
	b.简单查询
	可以查询指定的行，指定的列，指定行的列
	select * from customer where first_name='Mary';
	select last_name from customer;
	select last_name from customer where first_name='Mary';
	语法:
		select 列 from 表 where 条件;
	c.where 条件
	c1.比较
		>  大于
		<  小于
		=  等于
		>= 大于等于
		<= 小于等于
		!= 不等于
		<> 不等于
	例子：查询customer表中cutomer_id小于10的人的名字
	select last_name from customer where customer_id<10;
	注意：select后from前和列相关，where和行相关
	例子：查询customer表中cutomer_id不等于1的所有信息
	select * from customer where customer_id!=1;
	c2.关系
		and	同时满足
		or 	满足一个即可
		not     不满足条件
	例子：查询customer表中customer_id大于100并且小于200的所有名字
	select first_name from customer where customer_id>100 and customer_id<200;
	例子：查询customer表中名字是SUE或者BETH的所有信息
	select * from customer where first_name='SUE' or first_name='BETH';
	c3.区间
	区间范围是包括2个端点
	例子：查询customer表中customer_id范围是10和20之间的所有信息
	select * from customer where customer_id between 10 and 20;
	注意：小在前，大在后，一般和数字类型一起使用

	c4.模糊查询
	通常和字符类型一起使用
	like
	_	一个字符
	%	任意个字符
	例子：查询customer表中用户名字以M开头的所有信息
	select * from customer where first_name like 'M%';
	例子：查询customer表中用户名子以Y结尾的所有信息
	select * from customer where first_name like '%Y';
	例子：查询customer表中名字是5个字符的所有信息
	select * from customer where first_name like '_____';

	c5.in
	在...里面，或的关系
	例子：查询customer表中名字不是SUE或者BETH的所有信息
	select * from customer where first_name not  in ('SUE','BETH');

	c6.空值查询
	空是没有任何数据类型，没有任何值,不能用于比较和运算
	查询时候使用is null或者is not null
	例子：查询goods表中出厂日期为空的所有数据
	select * from goods where ddate is null;

	c7.常用函数
	upper	大写
	lower	小写
	round	小数点后保留几位
	avg     平均值
	select avg(price),round(avg(price),2) from goods;
	select lower(first_name) from customer;
	select lower(first_name),first_name from customer;

补充：
包：打包
创建的包文件通常以.tar结尾
tar -cvf test.tar example*	打包包文件test.tar内容为example开头的文件
tar -tvf test.tar		查看包文件test.tar
tar -xvf test.tar 		解包包文件test.tar到当前目录
tar -xvf test.tar -C 0331/ 	解包包文件test.tar到当前目录下的0331目录中
注意：解包到指定目录需要-C

压缩文件
du -sh  examples.desktop 	查看文件大小
gzip examples.desktop 		压缩文件
gzip -l examples.desktop.gz 	查看文件压缩属性
gzip -d examples.desktop.gz 	解压压缩文件

压缩包
先打包后压缩
压缩包文件通常以.tar.gz或者.tgz结尾
tar -czvf test3.tgz 0219         创建压缩包
tar -tzvf test3.tgz              查看压缩包属性
tar -xzvf test3.tgz              解压压缩包到当前目录




































	












































































































